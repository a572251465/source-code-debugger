'use strict';

// 表示node  自带的工具包
let util = require("util");
// 表示订阅以及启动任务的包
let Undertaker = require("undertaker");
// 虚拟file 包
let vfs = require("vinyl-fs");
// 支持正则以及监听的包
let watch = require("glob-watcher");

// gulp 函数本身
function Gulp() {
  // 实现属性继承
  Undertaker.call(this);

  // Bind the functions for destructuring
  this.watch = this.watch.bind(this);
  // 表示任务
  this.task = this.task.bind(this);
  // 表示串行的
  this.series = this.series.bind(this);
  // 表示并行的
  this.parallel = this.parallel.bind(this);
  this.registry = this.registry.bind(this);
  this.tree = this.tree.bind(this);
  this.lastRun = this.lastRun.bind(this);
  // 表示来源
  this.src = this.src.bind(this);
  // 表示目的
  this.dest = this.dest.bind(this);
  this.symlink = this.symlink.bind(this);
}
util.inherits(Gulp, Undertaker);

Gulp.prototype.src = vfs.src;
Gulp.prototype.dest = vfs.dest;
Gulp.prototype.symlink = vfs.symlink;
Gulp.prototype.watch = function(glob, opt, task) {
  if (typeof opt === 'string' || typeof task === 'string' ||
    Array.isArray(opt) || Array.isArray(task)) {
    throw new Error('watching ' + glob + ': watch task has to be ' +
      'a function (optionally generated by using gulp.parallel ' +
      'or gulp.series)');
  }

  if (typeof opt === 'function') {
    task = opt;
    opt = {};
  }

  opt = opt || {};

  var fn;
  if (typeof task === 'function') {
    fn = this.parallel(task);
  }

  return watch(glob, opt, fn);
};

// Let people use this class from our instance
Gulp.prototype.Gulp = Gulp;

// 表示gulp 实例
const inst = new Gulp();
// 返回实例
module.exports = inst;
